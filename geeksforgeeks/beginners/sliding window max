# Question: https://practice.geeksforgeeks.org/problems/maximum-of-all-subarrays-of-size-k3101/1?page=1&curated[]=8&sortBy=submissions

# leetcode solution: https://leetcode.com/problems/sliding-window-maximum/solutions/65957/python-solution-with-detailed-explanation/

import atexit
import io
import sys
from collections import deque

class Solution:
    
    def add_to_dq(self, dq, nums, i):
        while len(dq) and nums[dq[-1]] <= nums[i]:
            dq.pop()
        dq.append(i)
        return
    
    #Function to find maximum of each subarray of size k.
    def max_of_subarrays(self,nums,n,k):
        
        if k == 0:
            return []
        dq = deque()
        for i in range(k):
            self.add_to_dq(dq, nums, i)
        result, start, end = [], 0, k-1
        while end < len(nums):
            while True:
                if dq[0] >= start:
                    result.append(nums[dq[0]])
                    break
                else:
                    dq.popleft()
            start, end = start+1,end+1
            if end < len(nums):
                self.add_to_dq(dq, nums, end)
        return result



#User function Template for python3
from collections import deque

class Solution:
    
    def add_to_dq(self, dq, nums, i):
        while len(dq) and nums[dq[-1]] <= nums[i]:
            dq.pop()
        dq.append(i)
        return
    
    #Function to find maximum of each subarray of size k.
    def max_of_subarrays(self,nums,n,k):
        
        if k == 0:
            return []
        dq = deque()
        for i in range(k):
            self.add_to_dq(dq, nums, i)
        result, start, end = [], 0, k-1
        while end < len(nums):
            while True:
                if dq[0] >= start:
                    result.append(nums[dq[0]])
                    break
                else:
                    dq.popleft()
            start, end = start+1,end+1
            if end < len(nums):
                self.add_to_dq(dq, nums, end)
        return result


#Contributed by : Nagendra Jha

if __name__ == '__main__':
    # test_cases = int(input())
    # for cases in range(test_cases) :
    n,k = map(int,input().strip().split())
    arr = list(map(int,input().strip().split()))
    ob=Solution()
    res = ob.max_of_subarrays(arr,n,k)
    for i in range (len (res)):
        print (res[i], end = " ")
    print()